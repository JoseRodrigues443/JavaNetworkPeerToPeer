/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import client.Client;
import controller.ClientController;
import controller.PeerToPeerController;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import networkElements.Address;
import networkElements.IpProtocol;
import peerToPeer.ClientForPeerToPeer;
import peerToPeer.TcpFiles;
import utils.FileChooser;
import utils.Utils;

/**
 *
 * @author João Fernandes - 1141114 José Barros - 1151117 José Rodrigues -
 * 1150710 Tiago Vilaça - 1140412
 */
public class PeerToPeerMenuUI extends javax.swing.JFrame {

    private final controller.PeerToPeerController controller;

    /**
     * Creates new form ClientMenuUi
     *
     * @param client
     */
    public PeerToPeerMenuUI(ClientForPeerToPeer client) {
        controller = new PeerToPeerController(client);
        initComponents();
        setVisible(true);
        updateFileListTimed();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListDownloadedFilesClient = new javax.swing.JList<>();
        jTextClientIp = new javax.swing.JTextField();
        jTextClientBroadcastIp = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButtonChooseDirectory = new javax.swing.JButton();
        jTextFilePath = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListFromServerToDownload = new javax.swing.JList<>();
        jButtonDownloadFile = new javax.swing.JButton();
        jProgressBarDownload = new javax.swing.JProgressBar();
        jComboBoxTcpServers = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextClientBroadcastIp1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");
        setResizable(false);

        jListDownloadedFilesClient.setModel(utils.Utils.returnModelForJListStringFormat(Utils.listAllFilesStringList(controller.getPeer().filesDownloaded().getFilesList())));
        jScrollPane1.setViewportView(jListDownloadedFilesClient);

        jTextClientIp.setEditable(false);
        jTextClientIp.setText(controller.getPeer().getClientAddress().getAddress());
        jTextClientIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextClientIpActionPerformed(evt);
            }
        });

        jTextClientBroadcastIp.setEditable(false);
        jTextClientBroadcastIp.setText(controller.getPeer().getClientAddress().getBroadcastAddress());
        jTextClientBroadcastIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextClientBroadcastIpActionPerformed(evt);
            }
        });

        jLabel2.setText("IP");

        jLabel3.setText("Broadcast");

        jButtonChooseDirectory.setText("Choose directory");
        jButtonChooseDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooseDirectoryActionPerformed(evt);
            }
        });

        jTextFilePath.setEditable(false);
        jTextFilePath.setText("File path (default path)");
        jTextFilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFilePathActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jScrollPane2.setViewportView(jListFromServerToDownload);

        jButtonDownloadFile.setText("Download File");
        jButtonDownloadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownloadFileActionPerformed(evt);
            }
        });

        jProgressBarDownload.setToolTipText("Download");
        jProgressBarDownload.setValue(2);
        jProgressBarDownload.setName(""); // NOI18N

        jComboBoxTcpServers.setModel(new DefaultComboBoxModel(controller.getPeer().getTcpFileList().getAllTcpPort().toArray()
        ));
        jComboBoxTcpServers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTcpServersActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Peer TCP port number to view file list");

        jLabel4.setText("TCP port");

        jTextClientBroadcastIp1.setEditable(false);
        jTextClientBroadcastIp1.setText(""+controller.getPeer().getOwnServerPeerToPeer().getIdServer());
        jTextClientBroadcastIp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextClientBroadcastIp1ActionPerformed(evt);
            }
        });

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonChooseDirectory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFilePath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextClientBroadcastIp, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                            .addComponent(jTextClientIp)
                            .addComponent(jTextClientBroadcastIp1))))
                .addGap(0, 26, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jButtonDownloadFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBarDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxTcpServers, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(59, 59, 59))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextClientIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextClientBroadcastIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextClientBroadcastIp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonChooseDirectory)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBoxTcpServers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(jButton1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonDownloadFile)
                                .addGap(18, 18, 18)
                                .addComponent(jProgressBarDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextClientIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextClientIpActionPerformed
        // TODO addValidated your handling code here:
    }//GEN-LAST:event_jTextClientIpActionPerformed

    private void jTextClientBroadcastIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextClientBroadcastIpActionPerformed
        // TODO addValidated your handling code here:
    }//GEN-LAST:event_jTextClientBroadcastIpActionPerformed

    private void jButtonChooseDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChooseDirectoryActionPerformed
        FileChooser fileChooser = new FileChooser();
        String filePath = fileChooser.openFileChooser();
        jTextFilePath.setText(filePath);
    }//GEN-LAST:event_jButtonChooseDirectoryActionPerformed

    private void jTextFilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFilePathActionPerformed

    }//GEN-LAST:event_jTextFilePathActionPerformed

    private void jButtonDownloadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownloadFileActionPerformed

        int index = jComboBoxTcpServers.getSelectedIndex();
        if (index >= 0) {
            int tcpPort = controller.getPeer().getTcpFileList().getAllTcpPortNumeric().get(index);

            int[] indexes = jListFromServerToDownload.getSelectedIndices();
            //ArrayList<String> strings = controller.getPeer().getFilesInDownloadListCleaned();
            TcpFiles t = controller.getPeer().getTcpFileList().getByTcpPort(tcpPort);
            ArrayList<String> strings = controller.getPeer().getTcpFileList().getFileListByTcpPort(tcpPort);
            ArrayList<String> filesToRequest = new ArrayList<>();
            for (int i = 0; i < indexes.length; i++) {
                /**
                 * ex: file1.txt;file2.txt;
                 */
                filesToRequest.add(strings.get(indexes[i]));
            }
            if (filesToRequest.size() >= 0) {
                controller.getPeer().sendDownloadRequestTcp(tcpPort, t.getAddress().getAddress(),
                        filesToRequest);
            } else {
                JOptionPane.showMessageDialog(this, "There is no files selected to download. Nothins done!",
                        "ERROR",
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonDownloadFileActionPerformed

    private void jComboBoxTcpServersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTcpServersActionPerformed
        int i = jComboBoxTcpServers.getSelectedIndex();
        if (i >= 0) {
            int tcpPort = controller.getPeer().getTcpFileList().getAllTcpPortNumeric().get(i);
            ArrayList<String> list = controller.getPeer().getTcpFileList().getFileListByTcpPort(tcpPort);
            jListFromServerToDownload.setModel(utils.Utils.returnModelForJListStringFormat(list));
        }
    }//GEN-LAST:event_jComboBoxTcpServersActionPerformed

    private void jTextClientBroadcastIp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextClientBroadcastIp1ActionPerformed
        // TODO addValidated your handling code here:
    }//GEN-LAST:event_jTextClientBroadcastIp1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO addValidated your handling code here:
        updateFileList();
    }//GEN-LAST:event_jButton1ActionPerformed

    private boolean updateFileListTimed() {
        /*amount of time to the run method be executed again*/
        int timeInterval = Utils.secondsToMiliseconds(Client.SECONDS_TO_UPDATE_FILE_LIST_DEFAULT, Client.SECONDS_TO_RECEIVE_UDP_DEFAULT);
        Timer timerToSendUdp = new Timer();
        timerToSendUdp.schedule(new TimerTask() {
            @Override
            public void run() {
                updateFileList();
            }
        }, 0, timeInterval);

        return true;
    }

    private boolean updateFileList() {
        //jListFromServerToDownload.setModel(utils.Utils.returnModelForJListStringFormat(controller.getPeer().getFilesInDownloadListCleaned()));
        jListDownloadedFilesClient.setModel(utils.Utils.returnModelForJList(controller.getPeer().filesDownloaded().getFilesList()));
        jComboBoxTcpServers.setModel(new DefaultComboBoxModel(controller.getPeer().getTcpFileList().getAllTcpPort().toArray()));
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonChooseDirectory;
    private javax.swing.JButton jButtonDownloadFile;
    private javax.swing.JComboBox<String> jComboBoxTcpServers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListDownloadedFilesClient;
    private static javax.swing.JList<String> jListFromServerToDownload;
    private javax.swing.JProgressBar jProgressBarDownload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextClientBroadcastIp;
    private javax.swing.JTextField jTextClientBroadcastIp1;
    private javax.swing.JTextField jTextClientIp;
    private javax.swing.JTextField jTextFilePath;
    // End of variables declaration//GEN-END:variables
}
