/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import client.Client;
import controller.ClientController;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import networkElements.Address;
import networkElements.IpProtocol;
import utils.FileChooser;
import utils.Utils;

/**
 *
 * @author João Fernandes - 1141114 José Barros - 1151117 José Rodrigues - 1150710 Tiago Vilaça - 1140412
 */
public class ClientMenuUI extends javax.swing.JFrame {

    private final ClientController clientController;

    /**
     * Creates new form ClientMenuUi
     *
     * @param client
     */
    public ClientMenuUI(Client client) {
        clientController = new ClientController(client);
        initComponents();
        setVisible(true);
        updateFileListTimed();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListDownloadedFilesClient = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextClientIp = new javax.swing.JTextField();
        jTextClientBroadcastIp = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextServerIp = new javax.swing.JTextField();
        jTextServerBroadcastIp = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButtonChooseDirectory = new javax.swing.JButton();
        jTextFilePath = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListFromServerToDownload = new javax.swing.JList<>();
        jButtonDownloadFile = new javax.swing.JButton();
        jProgressBarDownload = new javax.swing.JProgressBar();
        jButtonRefresh = new javax.swing.JButton();
        jButtonRefreshList = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Peer to peer");
        setResizable(false);

        jLabel5.setText("Downloaded File List:");

        jListDownloadedFilesClient.setModel(utils.Utils.returnModelForJList(clientController.filesDownloaded()));
        jScrollPane1.setViewportView(jListDownloadedFilesClient);

        jLabel8.setFont(new java.awt.Font("Noto Sans", 0, 48)); // NOI18N
        jLabel8.setText("Server IP");

        jLabel1.setFont(new java.awt.Font("Noto Sans", 0, 48)); // NOI18N
        jLabel1.setText("Client");

        jTextClientIp.setEditable(false);
        jTextClientIp.setText(clientController.getClientAddress().getAddress());
        jTextClientIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextClientIpActionPerformed(evt);
            }
        });

        jTextClientBroadcastIp.setEditable(false);
        jTextClientBroadcastIp.setText(clientController.getClientAddress().getBroadcastAddress());
        jTextClientBroadcastIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextClientBroadcastIpActionPerformed(evt);
            }
        });

        jLabel2.setText("IP");

        jLabel3.setText("Broadcast");

        jTextServerIp.setText("Not Known Yet");
        jTextServerIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextServerIpActionPerformed(evt);
            }
        });

        jTextServerBroadcastIp.setText("Not Known Yet");
        jTextServerBroadcastIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextServerBroadcastIpActionPerformed(evt);
            }
        });

        jLabel4.setText("IP");

        jLabel10.setText("Broadcast");

        jButtonChooseDirectory.setText("Choose directory");
        jButtonChooseDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooseDirectoryActionPerformed(evt);
            }
        });

        jTextFilePath.setEditable(false);
        jTextFilePath.setText("File path (default path)");
        jTextFilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFilePathActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jListFromServerToDownload.setModel(utils.Utils.returnModelForJListStringFormat(clientController.getFilesInDownloadListCleaned()));
        jScrollPane2.setViewportView(jListFromServerToDownload);

        jButtonDownloadFile.setText("Download File");
        jButtonDownloadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownloadFileActionPerformed(evt);
            }
        });

        jProgressBarDownload.setToolTipText("Download");
        jProgressBarDownload.setValue(2);
        jProgressBarDownload.setName(""); // NOI18N

        jButtonRefresh.setText("Refresh");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jButtonRefreshList.setText("Refresh List");
        jButtonRefreshList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonChooseDirectory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextFilePath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextClientBroadcastIp)
                            .addComponent(jTextClientIp))))
                .addGap(26, 26, 26)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonDownloadFile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonRefreshList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextServerBroadcastIp, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                            .addComponent(jTextServerIp, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)))
                    .addComponent(jProgressBarDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextClientIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextClientBroadcastIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jButtonRefresh))
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonChooseDirectory)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jTextServerIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(jTextServerBroadcastIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRefreshList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDownloadFile)
                        .addGap(18, 18, 18)
                        .addComponent(jProgressBarDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextClientIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextClientIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextClientIpActionPerformed

    private void jTextClientBroadcastIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextClientBroadcastIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextClientBroadcastIpActionPerformed

    private void jTextServerIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextServerIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextServerIpActionPerformed

    private void jTextServerBroadcastIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextServerBroadcastIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextServerBroadcastIpActionPerformed

    private void jButtonChooseDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChooseDirectoryActionPerformed
        FileChooser fileChooser = new FileChooser();
        String filePath = fileChooser.openFileChooser();
        jTextFilePath.setText(filePath);
    }//GEN-LAST:event_jButtonChooseDirectoryActionPerformed

    private void jTextFilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFilePathActionPerformed

    }//GEN-LAST:event_jTextFilePathActionPerformed

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        jListDownloadedFilesClient.setModel(utils.Utils.returnModelForJList(clientController.filesDownloaded()));
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jButtonDownloadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownloadFileActionPerformed
        int[] indexes = jListFromServerToDownload.getSelectedIndices();
        ArrayList<String> strings = clientController.getFilesInDownloadListCleaned();
        ArrayList<String> filesToRequest = new ArrayList<>();
        for (int i = 0; i < indexes.length; i++) {
            /**
             * ex: file1.txt;file2.txt;
             */
            filesToRequest.add(strings.get(indexes[i]));
        }
        if (filesToRequest.size() > 0) {
            clientController.sendDownloadRequestTcp(clientController.getServerAddress().getAddress(),
                    filesToRequest);
        } else {
            JOptionPane.showMessageDialog(this, "There is no files selected to download. Nothins done!",
                    "ERROR",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonDownloadFileActionPerformed

    private void jButtonRefreshListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshListActionPerformed
        jListFromServerToDownload.setModel(utils.Utils.returnModelForJListStringFormat(clientController.getFilesInDownloadListCleaned()));
        jTextServerIp.setText(clientController.getServerAddress().getAddress());
        jTextServerBroadcastIp.setText(clientController.getServerAddress().getBroadcastAddress());
    }//GEN-LAST:event_jButtonRefreshListActionPerformed

    private boolean updateFileListTimed() {
        /*amount of time to the run method be executed again*/
        int timeInterval = Utils.secondsToMiliseconds(Client.SECONDS_TO_UPDATE_FILE_LIST_DEFAULT, Client.SECONDS_TO_RECEIVE_UDP_DEFAULT);
        Timer timerToSendUdp = new Timer();
        timerToSendUdp.schedule(new TimerTask() {
            @Override
            public void run() {
                jListFromServerToDownload.setModel(utils.Utils.returnModelForJListStringFormat(clientController.getFilesInDownloadListCleaned()));
                jTextServerIp.setText(clientController.getServerAddress().getAddress());
                jTextServerBroadcastIp.setText(clientController.getServerAddress().getBroadcastAddress());
                updateFileList();
            }
        }, 0, timeInterval);

        return true;
    }

    private boolean updateFileList() {
        jListDownloadedFilesClient.setModel(utils.Utils.returnModelForJList(clientController.filesDownloaded()));
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonChooseDirectory;
    private javax.swing.JButton jButtonDownloadFile;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonRefreshList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jListDownloadedFilesClient;
    private static javax.swing.JList<String> jListFromServerToDownload;
    private javax.swing.JProgressBar jProgressBarDownload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextClientBroadcastIp;
    private javax.swing.JTextField jTextClientIp;
    private javax.swing.JTextField jTextFilePath;
    private javax.swing.JTextField jTextServerBroadcastIp;
    private javax.swing.JTextField jTextServerIp;
    // End of variables declaration//GEN-END:variables
}
